<source>
  @type forward
  port 24224
  bind 0.0.0.0
</source>

<filter impresso.*>
  @type record_transformer
  enable_ruby true

  <record>
    tag_key ${tag}
    source_key ${record['source']}
    log_key ${record['log']}
    is_error ${if record['source'] == 'stderr' || (record['source'] == 'stdout' && (record['log'].downcase.include?('error') || record['log'].downcase.include?('exception'))) then true else false end}
  </record>
</filter>

# <match *.*>
#   @type stdout
# </match>

# Historically Django apps log everything to stderr
# In these apps, we want to filter out the logs that are not errors regardless of the stream
<filter impresso.user-admin>
  @type record_transformer
  enable_ruby true

  <record>
    is_error ${if record['log'].downcase.include?('error') || record['log'].downcase.include?('exception') then true else false end}
  </record>
</filter>

<filter impresso.celery>
  @type record_transformer
  enable_ruby true

  <record>
    is_error ${if record['log'].downcase.include?('error') || record['log'].downcase.include?('exception') then true else false end}
  </record>
</filter>


<filter impresso.**>
  @type grep
  <regexp>
    key is_error
    pattern true
  </regexp>
</filter>

<match impresso.**>
  @type copy

  <store>
    @type exec

    <format>
      @type json
    </format>

    command ruby /fluentd/etc/send_errors_to_matomo.rb

    # <buffer>
    #   @type file
    #   path  /tmp/test
    #   flush_interval 1s # for debugging
    # </buffer>

    <buffer time>
      @type file
      path /tmp/matomo_errors.*.buffer
      flush_at_shutdown true
      flush_mode interval
      flush_interval "#{ENV['OPS_FLUSH_INTERVAL'] || ENV['ES_FLUSH_INTERVAL'] || '5s'}"
      retry_max_interval 300
      chunk_limit_size "#{ENV['BUFFER_SIZE_LIMIT'] || '1m' }"
      queue_limit_length "#{ENV['BUFFER_QUEUE_LIMIT'] || '1024' }"
      timekey 3600
    </buffer>

  </store>

  <store>
    @type exec

    <format>
      @type json
    </format>

    command ruby /fluentd/etc/send_errors_to_slack.rb

    # <buffer>
    #   @type file
    #   path  /tmp/test
    #   flush_interval 1s # for debugging
    # </buffer>

    <buffer time>
      @type file
      path /tmp/slack_errors.*.buffer
      flush_at_shutdown true
      flush_mode interval
      flush_interval "#{ENV['OPS_FLUSH_INTERVAL'] || ENV['ES_FLUSH_INTERVAL'] || '5s'}"
      retry_max_interval 300
      chunk_limit_size "#{ENV['BUFFER_SIZE_LIMIT'] || '1m' }"
      queue_limit_length "#{ENV['BUFFER_QUEUE_LIMIT'] || '1024' }"
      timekey 3600
    </buffer>

  </store>


  # <store>
  #   @type stdout
  # </store>

</match>
